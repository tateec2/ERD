erdiagram TateCostaModel
notation=crowsfoot

// Students, courses and core university structure (based on provided model)
entity Student {
    student_id: INTEGER key
    name: VARCHAR(100)
    email: VARCHAR(100)
    major: VARCHAR(50)
    year: INTEGER
}

entity Course {
    course_id: VARCHAR(10) key
    title: VARCHAR(200)
    credits: INTEGER
    department_id: VARCHAR(10)
    instructor_id: INTEGER
    cost_per_credit: DECIMAL(8,2)
}

entity Instructor {
    instructor_id: INTEGER key
    name: VARCHAR(100)
    email: VARCHAR(100)
    department_id: VARCHAR(10)
}

entity Department {
    department_id: VARCHAR(10) key
    name: VARCHAR(100)
    location: VARCHAR(100)
}

// Enrollment links students and courses; include cost charged for the enrollment
entity Enrollment {
    enrollment_id: INTEGER key
    student_id: INTEGER
    course_id: VARCHAR(10)
    semester: VARCHAR(20)
    grade: VARCHAR(2)
    total_cost: DECIMAL(10,2)
}

// Financial entities: invoices, payments, scholarships and awards
entity Invoice {
    invoice_id: INTEGER key
    student_id: INTEGER
    issue_date: DATE
    due_date: DATE
    amount_due: DECIMAL(10,2)
    status: VARCHAR(20) // e.g., "open", "paid", "overdue"
}

entity Payment {
    payment_id: INTEGER key
    student_id: INTEGER
    payment_date: DATE
    amount: DECIMAL(10,2)
    method: VARCHAR(50) // e.g., "card", "check", "transfer"
    invoice_id: INTEGER
}

entity Scholarship {
    scholarship_id: INTEGER key
    name: VARCHAR(200)
    description: VARCHAR(500)
    amount: DECIMAL(10,2)
}

// Junction entity to record awarded scholarships to students (amount may vary)
entity StudentScholarship {
    award_id: INTEGER key
    student_id: INTEGER
    scholarship_id: INTEGER
    awarded_date: DATE
    amount_awarded: DECIMAL(10,2)
}

// Relationships
relationship StudentEnrollment {
    Student[1 | "student"] -> Enrollment[0..N | "enrollment"]
}

relationship EnrollmentCourse {
    Enrollment[0..N | "enrollment"] -> Course[1 | "course"]
}

relationship CourseInstructor {
    Course[0..N | "course"] -> Instructor[1 | "instructor"]
}

relationship CourseDepartment {
    Course[0..N | "course"] -> Department[1 | "department"]
}

relationship InstructorDepartment {
    Instructor[0..N | "instructor"] -> Department[1 | "department"]
}

relationship StudentInvoice {
    Student[1 | "student"] -> Invoice[0..N | "invoice"]
}

relationship StudentPayment {
    Student[1 | "student"] -> Payment[0..N | "payment"]
}

relationship InvoicePayment {
    Invoice[1 | "invoice"] -> Payment[0..N | "payment"]
}

relationship ScholarshipAward {
    Scholarship[1 | "scholarship"] -> StudentScholarship[0..N | "award"]
}

relationship StudentScholarshipRel {
    Student[1 | "student"] -> StudentScholarship[0..N | "award"]
}

// Notes / business rules assumptions (kept as comments):
// - Each Course has a cost per credit; Enrollment.total_cost = Course.credits * cost_per_credit (business rule)
// - Students receive Invoices; Invoices can be paid by Payments (one invoice -> many payments allowed)
// - Scholarships are defined centrally and awards record student-specific amounts
// - Enrollment is the transactional record that may be charged; payments/invoices are at the student level
